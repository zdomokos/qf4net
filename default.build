<?xml version="1.0"?>
<project name="QHsmPort" default="build">
	<!-- global project settings -->
	<property name="build.basedir" value="${nant.project.basedir}/bin" />
	<property name="packages.basedir" value="${build.basedir}/Packages" />
	<property name="zipfile" value="qf4net.zip" />

	<!-- default configuration -->
	<property name="project.config" value="debug" /> <!-- debug|release -->
	<property name="target" value="build" /> <!-- the target to be used in slave builds -->

	<!-- named project configurations -->
	<target name="debug" description="Perform a 'debug' build">
		<property name="project.config" value="debug" />
		<property name="build.debug" value="true" />
	</target>
    
	<target name="release" description="Perform a 'release' build">
		<property name="project.config" value="release" />
		<property name="build.debug" value="false" />
	</target>

	<target name="init" description="Initializes build properties">
		<!-- <call target="init-buildtype-${build.type}" /> -->
		<call target="${project.config}" />
		<property name="build.dir" value="${build.basedir}/${project.config}" />
		<property name="packages.dir" value="${packages.basedir}/${project.config}" />
	</target>
    
	<!-- build tasks -->
	<target name="recurse" description="Recursively invokes specified target in all subprojects">
		<property name="configured" value="true"/>
		<mkdir dir="${build.dir}" />

		<!-- ultimately that should really recursively find the build files for the subprojects.
			 Since we have so few we list them explicitely for now.
		-->
		
		<nant buildfile="src/qf4net.build" target="${target}"/>
		<nant buildfile="Examples/QHsmTest/QHsmTest.build" target="${target}"/>
		<nant buildfile="Examples/OptimizationBreaker/OptimizationBreaker.build" target="${target}"/>
		<nant buildfile="Examples/CalculatorHSM/CalculatorHSM.build" target="${target}"/>
		<nant buildfile="Examples/ReminderPattern/ReminderPattern.build" target="${target}"/>
		<nant buildfile="Examples/OrthogonalComponent/OrthogonalComponent.build" target="${target}"/>
		<nant buildfile="Examples/RunToCompletion/RtcWithLoopBreakout.build" target="${target}"/>
		<nant buildfile="Examples/DiningPhilosophers/DiningPhilosophers.build" target="${target}"/>
	</target>
	
	<target name="clean" depends="init" description="Deletes current build configuration">
		<echo message="Deleting content of build directory '${build.dir}' ..."/>
		<delete failonerror="true">
			<fileset>
				<include name="${build.dir}/**"/>
			</fileset>
		</delete>
	</target>

	<target name="cleanAll" description="Deletes every build configuration">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="${build.basedir}" failonerror="false" />
	</target>

	<target name="updateVersion" depends="init" description="Updates version numbers in all projects">
  		<version-xml path="version.xml" incrementBuildNr="true"/>

		<!-- Recursively update the version of subprojects -->
		<property name="target" value="UpdateVersion"/>
		<call target="recurse"/>
	</target>
	
	<target name="build" depends="init" description="Builds the current configuration">
		<!-- Recursively build subprojects -->
		<property name="target" value="build"/>
		<call target="recurse"/>
	</target>
	
	<target name="buildAll" description="Builds all configurations">
		<echo message="Performing debug build" />
		<call target="debug"/>
		<call target="init"/>
		<call target="build"/>
		
		<echo message="Performing release build" />
		<call target="release"/>
		<call target="init"/>
		<call target="build"/>
	</target>
    
    <target name="officialBuild" description="Bumps up build number and builds all assemblies" failonerror="true">
		<call target="cleanAll"/>
		
		<call target="updateVersion"/>
		<call target="buildAll"/>
	</target>
	
	<target name="package" depends="buildAll" description="Creates zip file for distribution">
		<delete file="${zipfile}" failonerror="false"/>
		<echo message="Assembling zip file ${zipfile} ..."/>

		<zip zipfile="${zipfile}">
			<fileset>
				<include name="**"/>
				<include name="bin/**"/>
				<exclude name="${zipfile}"/>
				<exclude name="**/.svn/**"/>
				<exclude name="**/*.lnk"/>
				<exclude name="**/*.suo"/>
				<exclude name="**/*.csproj.user"/>
				<exclude name="*/bin/**"/>
				<exclude name="*/*/bin/**"/>
				<exclude name="**/obj/**"/>
				<exclude name="**/.Private/**"/>
				<exclude name="WebSource/**"/>
				<exclude name="Web/**"/>
				<exclude name="UnitTests/**"/>
			</fileset>
		</zip>
	</target>

	<target name="assembleWeb" depends="package" description="Assembles web site">
		<echo message="Assembling web site ..."/>
		<property name="web.root" value="Web" />
		<property name="web.dir" value="${web.root}/dev/qhsm" />
		<delete dir="${web.root}" failonerror="false"/>

		<mkdir dir="${web.dir}"/>
		
		<property name="file.versionHistory" value="VersionHistory.html" />
		<property name="file.applicationNotes" value="ApplicationNotes.pdf" />
		<property name="file.index" value="index.html" />
		<property name="file.license" value="license.html" />
		
		<copy file="WebSource/${file.index}" tofile="${web.dir}/${file.index}"/>
		<copy file="${file.versionHistory}" tofile="${web.dir}/${file.versionHistory}"/>
		<copy file="Documentation/${file.applicationNotes}" tofile="${web.dir}/${file.applicationNotes}"/>
		<copy file="${zipfile}" tofile="${web.dir}/${zipfile}"/>
		<copy file="${file.license}" tofile="${web.dir}/${file.license}"/>
	</target>
</project>
